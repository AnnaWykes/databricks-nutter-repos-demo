trigger:
  batch: true
  branches:
    include:
    - '*'

  tags:
    include:
      - v*.*
      - prod

stages:
- stage: onPush
  condition: |
    and(
      ne(variables['Build.SourceBranch'], 'refs/heads/releases'),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  jobs:
  - job: onPushJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
        versionSpec: 3.7

    - checkout: self
      persistCredentials: true
      clean: true
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    - script: |
        python -m pip install --upgrade pip nutter
      displayName: 'Install dependencies'

    - script: |
        curl -n -X POST "$DATABRICKS_HOST/api/2.0/projects/fetch-and-checkout" \
          -H "Authorization: Bearer $DATABRICKS_TOKEN" \
          -d "{\"path\": \"/Staging/databricks-nutter-projects-demo\", \"branch\": \"$(Build.SourceBranchName)\"}"
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
      displayName: 'Update Staging project'

    - script: |
        nutter run '/Projects/Staging/databricks-nutter-projects-demo/' --cluster_id $(CLUSTER_ID) --recursive
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
      displayName: 'Execute Nutter tests'


- stage: onRelease
  condition: |
    or(
      eq(variables['Build.SourceBranch'], 'refs/heads/releases'),
      startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
    )
  jobs:
  - job: onReleaseJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - script: env | sort
        displayName: 'Environment / Context'

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: 3.7

      - checkout: self
        persistCredentials: true
        clean: true
        displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

      - script: |
          python -m pip install --upgrade pip
          pip install -r unit-requirements.txt
          pip install tools/dbx-0.7.0-py3-none-any.whl
          pip install -e .
        displayName: 'Install dependencies'

      - script: |
          pytest tests/unit
        displayName: 'Run Unit tests'

      - script: |
          echo "[DEFAULT]" >> ~/.databrickscfg
          echo "host = $DATABRICKS_HOST" >> ~/.databrickscfg
          echo "token = $DATABRICKS_TOKEN" >> ~/.databrickscfg
        env:
          DATABRICKS_HOST: $(DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
        displayName: 'Prepare profile'

      - script: |
          dbx deploy --jobs=azure_devops_demo-sample-integration-test
        displayName: 'Deploy integration test'

      - script: |
          dbx launch --job=azure_devops_demo-sample-integration-test --trace
        displayName: 'Launch integration on test'

      - script: |
          dbx deploy --jobs=azure_devops_demo-sample
        displayName: 'Deploy the job'
